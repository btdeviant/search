//go:build !noasm && amd64
// AUTO-GENERATED BY GOCC -- DO NOT EDIT

TEXT Â·f32_cosine_distance(SB), $0-32
	MOVQ x+0(FP), DI
	MOVQ y+8(FP), SI
	MOVQ result+16(FP), DX
	MOVQ size+24(FP), CX
	BYTE $0x55                                 // push	rbp
	WORD $0x8948; BYTE $0xe5                   // mov	rbp, rsp
	LONG $0xf8e48348                           // and	rsp, -8
	LONG $0xf8498d4c                           // lea	r9, [rcx - 8]
	LONG $0xc057f8c5                           // vxorps	xmm0, xmm0, xmm0
	LONG $0xe0c3c749; WORD $0xffff; BYTE $0xff // mov	r11, -32
	WORD $0xc031                               // xor	eax, eax
	WORD $0x8949; BYTE $0xc8                   // mov	r8, rcx
	LONG $0xd257e8c5                           // vxorps	xmm2, xmm2, xmm2
	LONG $0xc957f0c5                           // vxorps	xmm1, xmm1, xmm1

LBB0_1:
	LONG $0x1c10fcc5; BYTE $0x87   // vmovups	ymm3, ymmword ptr [rdi + 4*rax]
	LONG $0x2410fcc5; BYTE $0x86   // vmovups	ymm4, ymmword ptr [rsi + 4*rax]
	LONG $0xb865e2c4; BYTE $0xc4   // vfmadd231ps	ymm0, ymm3, ymm4
	LONG $0xb865e2c4; BYTE $0xd3   // vfmadd231ps	ymm2, ymm3, ymm3
	LONG $0xb85de2c4; BYTE $0xcc   // vfmadd231ps	ymm1, ymm4, ymm4
	LONG $0x08c08348               // add	rax, 8
	LONG $0xe0c38349               // add	r11, -32
	LONG $0xf8c08349               // add	r8, -8
	WORD $0x394c; BYTE $0xc8       // cmp	rax, r9
	JBE  LBB0_1
	LONG $0xc07cffc5               // vhaddps	ymm0, ymm0, ymm0
	LONG $0xc07cffc5               // vhaddps	ymm0, ymm0, ymm0
	LONG $0xd27cefc5               // vhaddps	ymm2, ymm2, ymm2
	LONG $0x197de3c4; WORD $0x01c3 // vextractf128	xmm3, ymm0, 1
	LONG $0xd27cefc5               // vhaddps	ymm2, ymm2, ymm2
	LONG $0xc058e2c5               // vaddss	xmm0, xmm3, xmm0
	LONG $0xc97cf7c5               // vhaddps	ymm1, ymm1, ymm1
	LONG $0x197de3c4; WORD $0x01d3 // vextractf128	xmm3, ymm2, 1
	LONG $0xe17cf7c5               // vhaddps	ymm4, ymm1, ymm1
	LONG $0xca58e2c5               // vaddss	xmm1, xmm3, xmm2
	LONG $0x197de3c4; WORD $0x01e2 // vextractf128	xmm2, ymm4, 1
	LONG $0xd458eac5               // vaddss	xmm2, xmm2, xmm4
	WORD $0x3948; BYTE $0xc8       // cmp	rax, rcx
	JAE  LBB0_9
	WORD $0x8949; BYTE $0xc9       // mov	r9, rcx
	WORD $0x2949; BYTE $0xc1       // sub	r9, rax
	LONG $0x10f98349               // cmp	r9, 16
	JAE  LBB0_5
	WORD $0x8949; BYTE $0xc0       // mov	r8, rax
	JMP  LBB0_8

LBB0_5:
	WORD $0xf749; BYTE $0xdb       // neg	r11
	WORD $0x894d; BYTE $0xca       // mov	r10, r9
	LONG $0xf0e28349               // and	r10, -16
	LONG $0xf0e08349               // and	r8, -16
	WORD $0x0149; BYTE $0xc0       // add	r8, rax
	LONG $0xdb57e0c5               // vxorps	xmm3, xmm3, xmm3
	LONG $0x0c61e3c4; WORD $0x01d2 // vblendps	xmm2, xmm3, xmm2, 1
	LONG $0x0c61e3c4; WORD $0x01c9 // vblendps	xmm1, xmm3, xmm1, 1
	LONG $0x0c61e3c4; WORD $0x01c0 // vblendps	xmm0, xmm3, xmm0, 1
	LONG $0xdb57e0c5               // vxorps	xmm3, xmm3, xmm3
	WORD $0x894c; BYTE $0xd0       // mov	rax, r10
	LONG $0xe457d8c5               // vxorps	xmm4, xmm4, xmm4
	LONG $0xed57d0c5               // vxorps	xmm5, xmm5, xmm5

LBB0_6:
	LONG $0x107ca1c4; WORD $0x1f74; BYTE $0xe0 // vmovups	ymm6, ymmword ptr [rdi + r11 - 32]
	LONG $0x107ca1c4; WORD $0x1f3c             // vmovups	ymm7, ymmword ptr [rdi + r11]
	LONG $0x107c21c4; WORD $0x1e44; BYTE $0xe0 // vmovups	ymm8, ymmword ptr [rsi + r11 - 32]
	LONG $0x107c21c4; WORD $0x1e0c             // vmovups	ymm9, ymmword ptr [rsi + r11]
	LONG $0xb83de2c4; BYTE $0xc6               // vfmadd231ps	ymm0, ymm8, ymm6
	LONG $0xb835e2c4; BYTE $0xef               // vfmadd231ps	ymm5, ymm9, ymm7
	LONG $0xb84de2c4; BYTE $0xce               // vfmadd231ps	ymm1, ymm6, ymm6
	LONG $0xb845e2c4; BYTE $0xe7               // vfmadd231ps	ymm4, ymm7, ymm7
	LONG $0xb83dc2c4; BYTE $0xd0               // vfmadd231ps	ymm2, ymm8, ymm8
	LONG $0xb835c2c4; BYTE $0xd9               // vfmadd231ps	ymm3, ymm9, ymm9
	LONG $0x40c38349                           // add	r11, 64
	LONG $0xf0c08348                           // add	rax, -16
	JNE  LBB0_6
	LONG $0xc058d4c5                           // vaddps	ymm0, ymm5, ymm0
	LONG $0x197de3c4; WORD $0x01c5             // vextractf128	xmm5, ymm0, 1
	LONG $0xc558f8c5                           // vaddps	xmm0, xmm0, xmm5
	LONG $0x0579e3c4; WORD $0x01e8             // vpermilpd	xmm5, xmm0, 1
	LONG $0xc558f8c5                           // vaddps	xmm0, xmm0, xmm5
	LONG $0xe816fac5                           // vmovshdup	xmm5, xmm0
	LONG $0xc558fac5                           // vaddss	xmm0, xmm0, xmm5
	LONG $0xc958dcc5                           // vaddps	ymm1, ymm4, ymm1
	LONG $0x197de3c4; WORD $0x01cc             // vextractf128	xmm4, ymm1, 1
	LONG $0xcc58f0c5                           // vaddps	xmm1, xmm1, xmm4
	LONG $0x0579e3c4; WORD $0x01e1             // vpermilpd	xmm4, xmm1, 1
	LONG $0xcc58f0c5                           // vaddps	xmm1, xmm1, xmm4
	LONG $0xe116fac5                           // vmovshdup	xmm4, xmm1
	LONG $0xcc58f2c5                           // vaddss	xmm1, xmm1, xmm4
	LONG $0xd258e4c5                           // vaddps	ymm2, ymm3, ymm2
	LONG $0x197de3c4; WORD $0x01d3             // vextractf128	xmm3, ymm2, 1
	LONG $0xd358e8c5                           // vaddps	xmm2, xmm2, xmm3
	LONG $0x0579e3c4; WORD $0x01da             // vpermilpd	xmm3, xmm2, 1
	LONG $0xd358e8c5                           // vaddps	xmm2, xmm2, xmm3
	LONG $0xda16fac5                           // vmovshdup	xmm3, xmm2
	LONG $0xd358eac5                           // vaddss	xmm2, xmm2, xmm3
	WORD $0x394d; BYTE $0xd1                   // cmp	r9, r10
	JE   LBB0_9

LBB0_8:
	LONG $0x107aa1c4; WORD $0x871c // vmovss	xmm3, dword ptr [rdi + 4*r8]
	LONG $0x107aa1c4; WORD $0x8624 // vmovss	xmm4, dword ptr [rsi + 4*r8]
	LONG $0xb959e2c4; BYTE $0xc3   // vfmadd231ss	xmm0, xmm4, xmm3
	LONG $0xb961e2c4; BYTE $0xcb   // vfmadd231ss	xmm1, xmm3, xmm3
	LONG $0xb959e2c4; BYTE $0xd4   // vfmadd231ss	xmm2, xmm4, xmm4
	WORD $0xff49; BYTE $0xc0       // inc	r8
	WORD $0x394c; BYTE $0xc1       // cmp	rcx, r8
	JNE  LBB0_8

LBB0_9:
	LONG $0xc959eac5         // vmulss	xmm1, xmm2, xmm1
	LONG $0xd151f2c5         // vsqrtss	xmm2, xmm1, xmm1
	LONG $0xc957f0c5         // vxorps	xmm1, xmm1, xmm1
	LONG $0xdb57e0c5         // vxorps	xmm3, xmm3, xmm3
	LONG $0xd32ef8c5         // vucomiss	xmm2, xmm3
	JNE  LBB0_10
	LONG $0x0a11fbc5         // vmovsd	qword ptr [rdx], xmm1
	WORD $0x8948; BYTE $0xec // mov	rsp, rbp
	BYTE $0x5d               // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret

LBB0_10:
	LONG $0xc05afac5         // vcvtss2sd	xmm0, xmm0, xmm0
	LONG $0xca5aeac5         // vcvtss2sd	xmm1, xmm2, xmm2
	LONG $0xc95efbc5         // vdivsd	xmm1, xmm0, xmm1
	LONG $0x0a11fbc5         // vmovsd	qword ptr [rdx], xmm1
	WORD $0x8948; BYTE $0xec // mov	rsp, rbp
	BYTE $0x5d               // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret
